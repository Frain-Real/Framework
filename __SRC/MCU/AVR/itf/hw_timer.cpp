/* Реализация программно зависимой части таймеров для Atmega328P */

#include "standard.h"
#include "timer.h"

// для таймера 0 используем конфигурацию: СТС, пределитель 64, сравнение с 249, 5 раз

Hw_timer::Hw_timer(u16 new_min_iter_time, u8 prescaller) {
    TCCR0A |= (1 << WGM01); // Режим CTC (сброс таймера при совпадении с OCR0A)
    // Значение сравнения OCR0A для 1 мс:
    // Частота таймера = 16e6 / 64 = 250 кГц → период 4 мкс.
    // Для 1 мс: 1e-3 / 4e-6 = 250 тиков → OCR0A = 250 - 1 = 249
    OCR0A = 249;   
    TIMSK0 |= (1 << OCIE0A); // Разрешить прерывание по совпадению
    TCNT0 = 0; // Сброс счетчика
}
Hw_timer::~Hw_timer() {
    TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00)); // Сброс битов предделителя
    TCCR0A &= ~(1 << WGM01); // Режим CTC (сброс таймера при совпадении с OCR0A)
    OCR0A = 0;
    TIMSK0 &= ~(1 << OCIE0A); // Разрешить прерывание по совпадению
    TCNT0 = 0; // Сброс счетчика
}
void Hw_timer::start() {
    TCCR0B |= (1 << CS01) | (1 << CS00); // Предделитель 64 (настраивается битами CS02, CS01, CS00)
}
void Hw_timer::stop() {
    TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00)); // Сброс битов предделителя
}

